// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

enum ColumnType {
  STRING
  NUMBER
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    workspaces    Workspace[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Workspace {
  id         String      @id @default(cuid())
  name       String      // e.g. "My Workspace"
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation: Each workspace belongs to one user
  tables     DataTable[] // One workspace can have many tables
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model DataTable { 
  id           String     @id @default(cuid())
  name         String     // A name or title for the table
  workspaceId  String // Relation: Each table belongs to one workspace
  workspace    Workspace   @relation(fields: [workspaceId], references: [id])
  columns      Column[]   // The columns defined for this table
  rows         Row[]      // The rows of the table
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Column { 
  id         String      @id @default(cuid())
  table      DataTable   @relation(fields: [tableId], references: [id])
  tableId    String
  title      String      // Column header or label
  position   Int         @default(autoincrement())// To define order of the columns
  cells      Cell[]      // Cells that belong to this column (one per row)
  dataType   ColumnType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}


model Row {
  id        String      @id @default(cuid())
  table     DataTable   @relation(fields: [tableId], references: [id])
  tableId   String
  cells     Cell[]      // Each row contains a cell per column
  createdAt DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}



model Cell {
  id       String      @id @default(cuid())
  rowId    String
  row      Row      @relation(fields: [rowId], references: [id])
  columnId String
  column   Column   @relation(fields: [columnId], references: [id])
  value    String   // For simplicity, store the cell's data as a string. Can convert/validate this data based on the column's `dataType`.
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}